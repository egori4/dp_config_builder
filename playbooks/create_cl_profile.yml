---
- name: Create and Attach Connection Limit Attacks to Profiles
  hosts: cc
  gather_facts: no
  vars_files:
    - ../vars/cc.yml

  vars:
    dp_ip:
      - "10.105.192.32"
      - "10.105.192.33"

    cl_mappings:
      - cl_profile_name: "Test_profile"
        protection_name: "Test_prot"
        params:
          protocol: tcp    # tcp/udp
          report_mode: drop  # report-only / drop
          threshold: 50
          tracking: ncps # sourcecount =ncps /destinationcount =ncpd/ src & Dest =ncpsd
          attack_type: concurrentconnection # cps / concurrentconnection
          packet_report: disable # enable / disable
          risk: medium # low / medium / high
          suspend_action: none # none / sip

  tasks:
    - block:
        - name: Lock device(s)
          dp_lock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"

        - name: Create CL Protections
          vars:
            protection_matrix: "{{ dp_ip | product(cl_mappings) | list }}"
          loop: "{{ protection_matrix }}"
          loop_control:
            label: "{{ item.0 }}/{{ item.1.protection_name }}"
          create_cl_protection:
            provider: "{{ cc }}"
            dp_ip: "{{ item.0 }}"
            name: "{{ item.1.protection_name }}"
            params: "{{ item.1.params }}"
          register: protection_results
          failed_when: >
            protection_results is failed and
            ('already exist' not in (protection_results.msg | default('')))

        - name: Attach Protections to CL Profiles
          vars:
            profile_matrix: "{{ dp_ip | product(cl_mappings) | list }}"
          loop: "{{ profile_matrix }}"
          loop_control:
            label: "{{ item.0 }}/{{ item.1.cl_profile_name }}/{{ item.1.protection_name }}"
          create_cl_profile:
            provider: "{{ cc }}"
            dp_ip: "{{ item.0 }}"
            cl_profile_name: "{{ item.1.cl_profile_name }}"
            protection_name: "{{ item.1.protection_name }}"
          register: profile_results
          failed_when: >
            profile_results is failed and
            ('already exists' not in (profile_results.msg | default('')) and
             'same key already exists' not in (profile_results.msg | default('')))

      always:
        - name: Unlock device(s)
          dp_unlock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"

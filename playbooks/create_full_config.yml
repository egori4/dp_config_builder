---
# Security Policy Creation Orchestrator Playbook
# This playbook creates all prerequisite components then creates security policies with profile bindings

# Device locking at the beginning for orchestrated flows
- name: "Centralized Device Locking for Orchestration"
  hosts: cc
  gather_facts: false
  vars_files:
    - ../vars/cc.yml
    - ../vars/create_vars.yml

  tasks:
    - name: "Orchestrate security policy and profile creation"
      block:
        - name: "Lock device(s) for orchestrated creation"
          dp_lock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"

        - name: "Create network classes and groups"
          create_network_class:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            netclasses: "{{ netclasses }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: network_class_results
          when: security_policy_config.create_network_classes | default(false)

        - name: "Display network class creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              Network Group Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.description }}
              {% endfor %}
              {% else %}
              No network classes configured for creation.
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% set created_groups = item.response.created_groups | default([]) %}
              {% set errors = item.response.errors | default([]) %}
              {% set summary = item.response.summary | default({}) %}
              {% if created_groups %}
              Network Groups ({{ summary.successful_groups | default(0) }}/{{ summary.total_groups_attempted | default(0) }} successful):
              {% for group in created_groups %}
              {% if group.status == 'success' %}
                -  {{ group.class_name }}[{{ group.index }}]: {{ group.address }}/{{ group.mask }}
              {% else %}
                -  {{ group.class_name }}[{{ group.index }}]: {{ group.address }}/{{ group.mask }} ({{ group.error | default('Unknown error') }})
              {% endif %}
              {% endfor %}
              {% endif %}
              {% if errors %}
              Errors ({{ errors | length }} occurred):
              {% for error in errors %}
                - {{ error }}
              {% endfor %}
              {% endif %}
              {% if not created_groups and not errors %}
              No network classes configured for creation.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ network_class_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_network_classes | default(false)
            - network_class_results is defined
            - network_class_results.results is defined

        - name: "Configure connection limit protections and profiles"
          create_cl_configuration:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            cl_protections: "{{ cl_protections }}"
            cl_profiles: "{{ cl_profiles }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: cl_results
          when: security_policy_config.create_cl_profiles | default(false)

        - name: "Display Connection Limit profile creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              Connection Limit Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.description }}
              {% endfor %}
              {% else %}
              No connection limit protections/profiles configured for creation.
              {% endif %}
              {% elif ansible_check_mode %}
              PREVIEW MODE - Operations that would be performed:
              Connection Limit Configurations ({{ item.debug_info.input.protections_count | default(0) }} protections + {{ item.debug_info.input.profiles_count | default(0) }} profiles):
              {% if item.debug_info.input.protections_count | default(0) > 0 %}
                - {{ item.debug_info.input.protections_count }} protection(s) would be created
              {% endif %}
              {% if item.debug_info.input.profiles_count | default(0) > 0 %}
                - {{ item.debug_info.input.profiles_count }} profile(s) would be created
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% if item.failed | default(false) %}
              Error occurred during creation:
                - {{ item.msg | default('Unknown error') }}
              {% elif item.debug_info.input.protections_count | default(0) > 0 or item.debug_info.input.profiles_count | default(0) > 0 %}
              Connection Limit Configurations created successfully:
              {% if item.debug_info.input.protections_count | default(0) > 0 %}
                - {{ item.debug_info.input.protections_count }} protection(s) created
              {% endif %}
              {% if item.debug_info.input.profiles_count | default(0) > 0 %}
                - {{ item.debug_info.input.profiles_count }} profile(s) created
              {% endif %}
              {% else %}
              No connection limit protections/profiles were created.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ cl_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_cl_profiles | default(false)
            - cl_results is defined
            - cl_results.results is defined

        - name: "Configure OOS profiles"
          create_oos_profile:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            oos_profiles: "{{ oos_profiles }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: oos_results
          when: security_policy_config.create_out_of_state_profiles | default(false)

        - name: "Display OOS profile creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              OOS Profile Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.profile_name }}
              {% endfor %}
              {% else %}
              No OOS profiles configured for creation.
              {% endif %}
              {% elif ansible_check_mode %}
              PREVIEW MODE - Operations that would be performed:
              OOS Configurations ({{ item.debug_info.input.profiles_count | default(0) }} profiles):
              {% if item.debug_info.input.profiles_count | default(0) > 0 %}
                - {{ item.debug_info.input.profiles_count }} profile(s) would be created
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% if item.failed | default(false) %}
              Error occurred during creation:
                - {{ item.msg | default('Unknown error') }}
              {% elif item.debug_info.input.profiles_count | default(0) > 0 %}
              OOS Profiles created successfully:
                - {{ item.debug_info.input.profiles_count }} profile(s) created
              {% else %}
              No OOS profiles were created.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ oos_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_out_of_state_profiles | default(false)
            - oos_results is defined
            - oos_results.results is defined

        - name: "Configure BDOS profiles"
          create_bdos_profile:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            bdos_profiles: "{{ bdos_profiles }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: bdos_results
          when: security_policy_config.create_bdos_profiles | default(false)

        - name: "Display BDoS profile creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              BDoS Profile Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.profile_name }}
                  Parameters:
                  {% for k, v in op.params.items() %}
                    - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No BDoS profiles configured for creation.
              {% endif %}
              {% elif ansible_check_mode %}
              PREVIEW MODE - Operations that would be performed:
              BDoS Configurations ({{ item.debug_info.input.profiles_count | default(0) }} profiles):
              {% if item.debug_info.input.profiles_count | default(0) > 0 %}
                - {{ item.debug_info.input.profiles_count }} profile(s) would be created
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% if item.failed | default(false) %}
              Error occurred during creation:
                - {{ item.msg | default('Unknown error') }}
              {% elif item.response.created_profiles | default([]) %}
              BDoS Profiles created successfully:
              {% for prof in item.response.created_profiles %}
                - {{ prof.profile_name }}
                  Parameters:
                  {% set all_params = prof.user_friendly.phase1 | combine(prof.user_friendly.phase2) %}
                  {% for k, v in all_params.items() %}
                  - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No BDoS profiles were created.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ bdos_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_bdos_profiles | default(false)
            - bdos_results is defined
            - bdos_results.results is defined

        - name: "Configure DNS profiles"
          create_dns_profile:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            dns_profiles: "{{ create_dns_profiles }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: dns_results
          when: security_policy_config.create_dns_profiles | default(false)

        - name: "Display DNS profile creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              DNS Profile Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.profile_name }}
                  Parameters:
                  {% for k, v in op.params.items() %}
                    - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No DNS profiles configured for creation.
              {% endif %}
              {% elif ansible_check_mode %}
              PREVIEW MODE - Operations that would be performed:
              DNS Configurations ({{ item.debug_info.input.profiles_count | default(0) }} profiles):
              {% if item.debug_info.input.profiles_count | default(0) > 0 %}
                - {{ item.debug_info.input.profiles_count }} profile(s) would be created
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% if item.failed | default(false) %}
              Error occurred during creation:
                - {{ item.msg | default('Unknown error') }}
              {% elif item.response.created_profiles | default([]) %}
              DNS Profiles created successfully:
              {% for prof in item.response.created_profiles %}
                - {{ prof.profile_name }}
                  Parameters:
                  {% set all_params = prof.user_friendly.phase1 | combine(prof.user_friendly.phase2) %}
                  {% for k, v in all_params.items() %}
                  - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No DNS profiles were created.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ dns_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_dns_profiles | default(false)
            - dns_results is defined
            - dns_results.results is defined

        - name: "Configure HTTPS profiles"
          create_https_profile:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            https_flood_profiles: "{{ create_https_profiles }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: https_results
          when: security_policy_config.create_https_profiles | default(false)

        - name: "Display HTTPS profile creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Planned operations:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              HTTPS Profile Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - {{ op.profile_name }}
                  Parameters:
                  {% for k, v in op.params.items() %}
                    - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No HTTPS profiles configured for creation.
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% if item.failed | default(false) %}
              Error occurred during creation:
                - {{ item.msg | default('Unknown error') }}
              {% elif item.response.created_profiles | default([]) %}
              HTTPS Profiles created successfully:
              {% for prof in item.response.created_profiles %}
                - {{ prof.profile_name }}
                  Parameters:
                  {% for k, v in prof.user_friendly.items() %}
                  - {{ k }}: {{ v }}
                  {% endfor %}
              {% endfor %}
              {% else %}
              No HTTP profiles were created.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ https_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_https_profiles | default(false)
            - https_results is defined
            - https_results.results is defined

        - name: "Create DefensePro security policies"
          create_full_config:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            security_policies: "{{ create_security_policies }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: security_policy_results
          when: security_policy_config.create_security_policies | default(false)


        - name: "Display security policy creation results"
          vars:
            formatted_output: |
              Device: {{ item.item }}
              {% if item.response.preview_mode | default(false) %}
              PREVIEW MODE - Operations that would be performed:
              {% set planned_ops = item.response.planned_operations | default([]) %}
              {% if planned_ops %}
              Security Policy Creations ({{ planned_ops | length }} planned):
              {% for op in planned_ops %}
                - Policy: {{ op.policy_name }} ({{ op.src_network }} -> {{ op.dst_network }})
                  Profiles:
                    {% if op.get('connection_limit_profile') %}CL: {{ op.connection_limit_profile }}
                    {% endif %}{% if op.get('bdos_profile') %}BDoS: {{ op.bdos_profile }}
                    {% endif %}{% if op.get('dns_flood_profile') %}DNS: {{ op.dns_flood_profile }}
                    {% endif %}{% if op.get('https_flood_profile') %}HTTPS: {{ op.https_flood_profile }}
                    {% endif %}{% if op.get('out_of_state_profile') %}OOS: {{ op.out_of_state_profile }}
                    {% endif %}{% if op.get('signature_protection_profile') %}Signature: {{ op.signature_protection_profile }}
                    {% endif %}{% if op.get('syn_protection_profile') %}SYN: {{ op.syn_protection_profile }}
                    {% endif %}{% if op.get('traffic_filters_profile') %}Traffic: {{ op.traffic_filters_profile }}
                    {% endif %}{% if op.get('ert_attackers_feed_profile') %}ERT: {{ op.ert_attackers_feed_profile }}
                    {% endif %}{% if op.get('geo_feed_profile') %}Geo: {{ op.geo_feed_profile }}
                    {% endif %}
              {% endfor %}
              {% else %}

              No security policies configured for creation.
              {% endif %}
              {% else %}
              EXECUTION RESULTS:
              {% set created_policies = item.response.created_policies | default([]) %}
              {% set errors = item.response.errors | default([]) %}
              {% set summary = item.response.summary | default({}) %}
              {% if created_policies %}

              Security Policies ({{ summary.successful_policies | default(0) }}/{{ summary.total_policies_attempted | default(0) }} successful):
              {% for policy in created_policies %}
                - {{ policy.policy_name }}: {{ policy.src_network }} -> {{ policy.dst_network }}
                  {% if policy.direction is defined %}Direction: {{ policy.direction }}
                  {% endif %}{% if policy.priority is defined %}Priority: {{ policy.priority }}
                  {% endif %}Profiles:
                    {% if policy.get('connection_limit_profile') %}CL: {{ policy.connection_limit_profile }}
                    {% endif %}{% if policy.get('bdos_profile') %}BDoS: {{ policy.bdos_profile }}
                    {% endif %}{% if policy.get('dns_flood_profile') %}DNS: {{ policy.dns_flood_profile }}
                    {% endif %}{% if policy.get('https_flood_profile') %}HTTPS: {{ policy.https_flood_profile }}
                    {% endif %}{% if policy.get('out_of_state_profile') %}OOS: {{ policy.out_of_state_profile }}
                    {% endif %}{% if policy.get('signature_protection_profile') %}Signature: {{ policy.signature_protection_profile }}
                    {% endif %}{% if policy.get('syn_protection_profile') %}SYN: {{ policy.syn_protection_profile }}
                    {% endif %}{% if policy.get('traffic_filters_profile') %}Traffic: {{ policy.traffic_filters_profile }}
                    {% endif %}{% if policy.get('ert_attackers_feed_profile') %}ERT: {{ policy.ert_attackers_feed_profile }}
                    {% endif %}{% if policy.get('geo_feed_profile') %}Geo: {{ policy.geo_feed_profile }}
                    {% endif %}
              {% endfor %}
              {% endif %}
              {% if errors %}

              Errors ({{ errors | length }} occurred):
              {% for error in errors %}
                - {{ error }}
              {% endfor %}
              {% endif %}
              {% if not created_policies and not errors %}

              No security policies configured for creation.
              {% endif %}
              {% endif %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"
          loop: "{{ security_policy_results.results }}"
          loop_control:
            label: "Device: {{ item.item }}"
          when:
            - security_policy_config.create_security_policies | default(false)
            - security_policy_results is defined
            - security_policy_results.results is defined

        - name: "Apply policy updates per device"
          update_policies:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Applying policies: {{ item }}"
          when:
            - security_policy_config.create_security_policies | default(false)
            - security_policy_config.apply_policies_after_creation | default(true)

      always:
        - name: "Unlock device(s)"
          dp_unlock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"

    # End of orchestration playbook

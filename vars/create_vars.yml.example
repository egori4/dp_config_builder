---
# create_vars.yml.example - Template for creating network class variables
# Copy this file to create_vars.yml and customize with your environment details

# Target DefensePro devices - add or remove IP addresses as needed
dp_ip:
  - "10.105.192.32"
  # - "10.105.192.33"
  # - "10.105.192.34"

# Define network classes to create with their network groups
netclasses:
  # Example: Create a network class named "egor_test_net" with 4 network groups
  - name: "egor_test_net"
    groups:
      - { address: "10.10.10.0", mask: "255.255.255.0" }
      - { address: "10.10.11.0", mask: "255.255.255.0" }
      - { address: "10.10.12.0", mask: "255.255.255.0" }
      - { address: "10.10.13.0", mask: "255.255.255.0" }
  
  # Example: Create another network class  
  # - name: "web_servers"
  #   groups:
  #     - { address: "192.168.1.0", mask: "255.255.255.0" }
  #     - { address: "192.168.2.0", mask: "255.255.255.0" }
  
  # Example: Create with CIDR notation
  # - name: "database_servers"  
  #   groups:
  #     - { address: "10.20.1.0", mask: "24" }
  #     - { address: "10.20.2.0", mask: "24" }

# Notes:
# - name: Must be unique network class name
# - address: Network address for each group within the class
# - mask: Can be CIDR notation (e.g., "24") or dotted decimal (e.g., "255.255.255.0")  
# - Groups are automatically assigned indices starting from 0
# - The playbook will create all combinations of dp_ip × netclasses × groups


################################### Connection Limit Profiles ##############################
# Connection Limit Protection Subprofiles (OPTIONAL - only define if you want to create new protections)
# All parameters use user-friendly values that are automatically mapped to API values
# You can skip this entire section if you only want to create profiles using existing protections
cl_protections:
  - name: "cl_prot_tcp_example"
    protection_type: "concurrent_connections"  # Options: cps, concurrent_connections
    protocol: "tcp"             # Options: tcp, udp
    threshold: "100"            # Connection limit threshold (number)
    app_port_group: "https"     # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "src_ip"     # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "drop"              # Options: report_only, drop
    packet_report: "disable"    # Options: enable, disable
    index: 0                    # Optional: specific index to create at (defaults to 0 if not specified = will be allocated dynamically)
  - name: "cl_prot_udp_example"
    protection_type: "cps"      # Options: cps, concurrent_connections
    protocol: "udp"             # Options: tcp, udp
    threshold: "500"            # Connection limit threshold (number)
    app_port_group: ""          # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "dst_ip_and_port"  # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "report_only"       # Options: report_only, drop
    packet_report: "enable"     # Options: enable, disable
    # index: 450006             # Optional: if not specified, defaults to 0
  - name: "cl_prot_custom_index"
    protection_type: "cps"      # Options: cps, concurrent_connections
    protocol: "tcp"             # Options: tcp, udp
    threshold: "200"            # Connection limit threshold (number)
    app_port_group: "http"      # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "dst_ip"     # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "drop"              # Options: report_only, drop
    packet_report: "enable"     # Options: enable, disable
    index: 450007               # Optional: create at specific index 450007

# Parameter Descriptions:
# - protection_type: Type of detection (cps = Connections Per Second, concurrent_connections = Total active connections)
# - protocol: Network protocol to monitor
# - threshold: Number at which protection triggers
# - app_port_group: Application port group to monitor (http, https, dns, ftp, custom port, or empty for all ports)
# - tracking_type: What traffic to track (src_ip, dst_ip, both IPs, or dst_ip with port)
# - action: What to do when threshold exceeded (report_only = log only, drop = block traffic)
# - packet_report: Whether to enable detailed packet reporting
# - index: Optional specific index to create protection at (defaults to 0 if not specified)

# Connection Limit Profiles (OPTIONAL - only define if you want to create profiles)
# Can reference any protection names - existing or newly created above
# You can skip this entire section if you only want to create protections
cl_profiles:
  - name: "cl_prof_example"
    protections:
      - "cl_prot_tcp_example"   # Will be created above
      - "cl_prot_udp_example"   # Will be created above
  - name: "cl_prof_existing_only"
    protections:
      - "some_existing_protection"    # Reference existing protections without defining them

# Usage Scenarios:
# 1. Create protections only: Define cl_protections, skip cl_profiles
# 2. Create profiles only: Skip cl_protections, define cl_profiles with existing protection names
# 3. Create both: Define both cl_protections and cl_profiles

########################## BDoS Profiles ##########################
# Define BDOS profiles to create on each device
# All parameters use user-friendly values that are automatically mapped to API values
# You can skip this section if you only want to use existing BDoS profiles

bdos_profiles:
  - name: "BDOS_Profile_50"
    params:
      action: "report_only"                   # Options: report_only, block_&_report
      syn_flood: "enable"                     # Options: enable, disable
      udp_flood: "enable"                     # Options: enable, disable
      igmp_flood: "enable"                    # Options: enable, disable
      icmp_flood: "enable"                    # Options: enable, disable
      tcp_ack_fin_flood: "enable"             # Options: enable, disable
      tcp_rst_flood: "enable"                 # Options: enable, disable
      tcp_syn_ack_flood: "enable"             # Options: enable, disable
      tcp_frag_flood: "enable"                # Options: enable, disable
      udp_frag_flood: "enable"                # Options: enable, disable
      inbound_traffic: 1000000                # 1 to 1342177280 (kbps)
      outbound_traffic: 500000                # 1 to 1342177280 (kbps)
      tcp_in_quota: 80                         # 0-100 (%)
      udp_in_quota: 50                         # 0-100 (%)
      icmp_in_quota: 10                        # 0-100 (%)
      igmp_in_quota: 50                        # 0-100 (%)
      tcp_out_quota: 80                        # 0-100 (%)
      udp_out_quota: 50                        # 0-100 (%)
      icmp_out_quota: 10                        # 0-100 (%)
      igmp_out_quota: 50                        # 0-100 (%)
      transparent_optimization: "enable"       # Options: enable, disable
      packet_report: "enable"                  # Options: enable, disable
      burst_attack: "enable"                   # Options: enable, disable
      maximum_interval_between_bursts: 32      # Minutes (1-336)
      learning_suppression_threshold: 10       # 0-50
      footprint_strictness: "medium"           # Options: low, medium, high
      udp_packet_rate_detection_sensitivity: "low"  # Options: Ignore_or_Disable, low, medium, high
      bdos_rate_limit: "user_defined"          # Options: disable, normal_edge, suspect_edge, user_defined
      user_defined_rate_limit: 500             # 0-4000 (rate value)
      user_defined_rate_limit_unit: "mbps"     # Options: kbps, mbps, gbps
      adv_udp_detection: "enable"              # Options: enable, disable

# Parameter Descriptions:
# - action: What to do when a flood is detected
# - *_flood: Enable/disable detection of specific attack type
# - inbound_traffic / outbound_traffic: Max traffic allowed (bps)
# - *_in_quota / *_out_quota: Traffic quota per protocol (%)
# - transparent_optimization: Optimize traffic without blocking
# - packet_report: Enable detailed packet reporting
# - burst_attack: Detect burst attacks
# - maximum_interval_between_bursts: Interval in minutes to define burst
# - learning_suppression_threshold: Suppress alerts during learning (0-50)
# - footprint_strictness: Sensitivity of footprint analysis
# - udp_packet_rate_detection_sensitivity: Sensitivity of UDP flood detection
# - bdos_rate_limit: Rate limit mode
# - user_defined_rate_limit / unit: Custom rate limit
# - adv_udp_detection: Advanced UDP detection toggle

# Usage Scenarios:
# 1. Create new BDoS profiles: Define bdos_profiles
# 2. Use existing BDoS profiles only: Skip this section and reference them elsewhere

################################## DNS Profile create Variables ###############################
# Define DNS profiles to create on each device
# All parameters use user-friendly values that are automatically mapped to API values
# You can skip this section if you only want to use existing DNS profiles
# List of DefensePro device IPs where profiles will be created
# DNS profiles to configure
create_dns_profiles:
  - name: "dns_profile_10"
    params:
      # Core settings
      action: "block_&_report"              # ENUM: report_only, block_and_report
      expected_qps: 1000                      # Expected QPS (0–400M)
      max_allow_qps: 5000                     # Maximum allowed QPS
      footprint_strictness: "medium"          # ENUM: low, medium, high
      packet_report: "enable"                 # ENUM: enable, disable
      learning_suppression_threshold: 25      # Range: 0–50
      sig_rate_lim_target: 10                 # Range: 0-100 in %

      # DNS quotas
      a_quota: 50                             # A-record quota %
      mx_quota: 20                            # MX-record quota %
      ptr_quota: 12                           # PTR-record quota %
      aaaa_quota: 15                          # AAAA-record quota %
      text_quota: 2                           # TXT-record quota %
      soa_quota: 1                            # SOA-record quota %
      naptr_quota: 1                          # NAPTR-record quota %
      srv_quota: 1                            # SRV-record quota %
      other_quota: 1                          # Other-record quota %

      # Status toggles (use enable/disable instead of numeric)
      a_status: "enable"
      mx_status: "enable"
      ptr_status: "enable"
      aaaa_status: "enable"
      text_status: "enable"
      soa_status: "enable"
      naptr_status: "enable"
      srv_status: "enable"
      other_status: "enable"

      # Manual trigger thresholds
      manual_trigger: "disable"               # ENUM: enable, disable
      manual_trigger_act_thresh: 0
      manual_trigger_term_thresh: 0

  - name: "dns_profile_20"
    params:
      # Core settings
      action: "block_&_report"              # ENUM: report_only, block_&_report
      expected_qps: 1000                      # Expected QPS (0–400M)
      max_allow_qps: 5000                     # Maximum allowed QPS
      manual_trigger: "disable"               # ENUM: enable, disable
      footprint_strictness: "medium"          # ENUM: low, medium, high
      packet_report: "enable"                 # ENUM: enable, disable
      learning_suppression_threshold: 25      # Range: 0–50

      # DNS quotas
      a_quota: 50                             # A-record quota %
      mx_quota: 20                            # MX-record quota %
      ptr_quota: 12                           # PTR-record quota %
      aaaa_quota: 15                          # AAAA-record quota %
      text_quota: 2                           # TXT-record quota %
      soa_quota: 1                            # SOA-record quota %
      naptr_quota: 1                          # NAPTR-record quota %
      srv_quota: 1                            # SRV-record quota %
      other_quota: 1                          # Other-record quota %

      # Status toggles (use enable/disable instead of numeric)
      a_status: "enable"
      mx_status: "enable"
      ptr_status: "enable"
      aaaa_status: "enable"
      text_status: "enable"
      soa_status: "enable"
      naptr_status: "enable"
      srv_status: "enable"
      other_status: "enable"

      # Manual trigger thresholds
      manual_trigger_act_thresh: 0
      manual_trigger_term_thresh: 0

### Parameter Descriptions:
# - action: What to do when DNS traffic anomaly is detected
# - expected_qps / max_allow_qps: Thresholds for query rates
# - manual_trigger and related fields: Enable manual override and thresholds
# - packet_report / packet_trace: Enable detailed reporting and tracing
# - footprint_strictness: Sensitivity of footprint analysis
# - learning_suppression_threshold: Suppress alerts during learning (0-100)
# - query_name_sensitivity: Sensitivity of query name monitoring
# - *_quota: Percentage allocation per DNS record type
# - *_status: Enable/disable monitoring per DNS record type

# Usage Scenarios:
# 1. Create new DNS profiles: Define dns_profiles
# 2. Use existing DNS profiles only: Skip this section and reference them elsewhere

################################## SSL Object Create Variables ###############################

# Define SSL objects to edit
create_ssl_objects:
  - ssl_object_name: "server1"                   # Mandatory: exact SSL object name
    ssl_object_profile: "enable"                 # Options: enable, disable
    ip_address: "155.1.102.9"                    # Mandatory
    Port: 443                                    # Optional – default: 443
    add_certificate: ""                          # Optional – certificate name to add 
    front_sslv3: "disable"                       # Options: enable, disable
    front_tls1.0: "disable"                      # Options: enable, disable
    front_tls1.1: "disable"                      # Options: enable, disable
    front_tls1.2: "enable"                       # Options: enable, disable
    front_tls1.3: "enable"                       # Options: enable, disable
    bk_end_decrypt: "enable"                      # Options: enable, disable
    bk_end_sslv3: "disable"                      # Options: enable, disable
    bk_end_tls1.0: "disable"                     # Options: enable, disable
    bk_end_tls1.1: "enable"                      # Options: enable, disable
    bk_end_tls1.2: "enable"                      # Options: enable, disable
    bk_end_tls1.3: "enable"                      # Options: enable, disable
    bk_end_port: 80                              # Optional – back-end port

### Notes for SSL Objects:
# *** ssl_object_name ***: Mandatory –  SSL object name to add 
# Supported SSL Object Parameters:
# ssl_object_profile: enable / disable
# IP_Address: IP of the server
# Port: TCP port (default: 443)
# add_certificate / remove_certificate: certificate management
# front_sslv3, front_tls1.0, front_tls1.1, front_tls1.2, front_tls1.3: enable / disable
# cipher_suite: enable / disable
# front_user_cipher: custom front-end cipher string
# bk_end_decrypt: enable / disable
# bk_end_sslv3, bk_end_tls1.0, bk_end_tls1.1, bk_end_tls1.2, bk_end_tls1.3: enable / disable
# bk_cipher: enable / disable
# bk_user_cipher: custom back-end cipher string
# bk_end_port: back-end TCP port

################################## HTTPS Profile Create Variables ###############################
# Define HTTPS profiles to create
# All parameters use user-friendly values that are automatically mapped to API values
create_https_profiles:
  - name: "https_profile_1"
    params:
      action: "report_only"                             # report_only,block_and_report
      rate_limit: "2000"                                # Packets per Second per Source
      https_authentication_on_suspect_sources: "enable"  # enable, disable
      https_authentication_on_all_sources: "enable"      # enable, disable
      rate_limit_status: "enable"                       # enable, disable
      packet_report: "disable"                          # enable, disable
      full_session_decryption: "disable"                # enable, disable
      #challenge_method: "javascript" 
      
  # Note - SSL Decryption and Encryption should be enabled on the DP for challenge method to work

########################## Traffic Filter Profiles and Protections ##########################
# List of Traffic Filter profiles and protections to create per device
# Each item contains create_tf_profiles and create_tf_protections lists
# create_tf_profiles: list of profiles to create
# create_tf_protections: list of protections under the profiles


create_tf_profiles:
  - profile_name: "TF_PROFILE_1"
    action: "report_only"           # report_only, block_and_report (Default: repot_only)
  - profile_name: "TF_PROFILE_2"
    action: "block_and_report"      # report_only, block_and_report
  - profile_name: "TF_PROFILE_3"
    action: "block_and_report"      # report_only, block_and_report  

create_tf_protections:
  - profile_name: "TF_PROFILE_1"
    protection_name: "TF_PROT_1"
    status: "enable"                # Optional: enable, disable (Default: enable)
    match_criteria: "match"         # Optional: match, not-match (Default:match)
    protocol: "tcp"                 # Ottional: any, tcp, udp, icmp, etc. (Default:any)
    threshold_pps: "5000"           # Optional: rate limit in packets per second (deafult :10000)
    threshold_kbps: "0"             # Optional: rate limit in kilo bits per second
    threshold_unit: "pps"           # optional: kbps, pps (Default:pps)
    tcp_syn: "enable"               # Optional: TCP SYN flag handling (Default:enable)
    tcp_ack: "enable"               # Optional: TCP ACK flag handling (Default:enable)
    tcp_rst: "enable"               # Optional: TCP RST flag handling (Default:enable)
    tcp_synack: "enable"            # Optional: TCP SYN-ACK flag handling (Default:enable)
    tcp_finack: "enable"            # Optional: TCP FIN-ACK flag handling (Default:enable)
    tcp_pshack: "enable"            # optional: TCP PSH-ACK flag handling (Default:enable)
    packet_report: "enable"         # Optional: enable, disable (Default:enable)
    attack_tracking_type: "per_destination"    # Optional: all, per-source, per-destination, per_source_and_destination, track_returning_traffic (Default:all)


  - profile_name: "TF_PROFILE_2"
    protection_name: "TF_PROT_2"
    status: "enable"             
    match_criteria: "match"         # match, not-match
    protocol: "tcp"                 # any, tcp, udp, icmp, etc.
    threshold_pps: "5000"
    threshold_kbps: "0"
    threshold_unit: "pps"           # kbps, pps
    tcp_syn: "enable"
    tcp_ack: "enable"
    tcp_rst: "enable"
    tcp_synack: "enable"
    tcp_finack: "enable"
    tcp_pshack: "enable"

    packet_report: "enable"         # enable, disable

    attack_tracking_type: "all"    # all, per-source, per-destination, per_source_and_destination, track_returning_traffic

## Minimal configuration to create protection
  - profile_name: "TF_PROFILE_3"
    protection_name: "TF_PROT_3"
    protocol: "tcp"
    threshold_pps: "5000"
    threshold_unit: "pps"
    attack_tracking_type: "per_destination"
 
  
########################## Security Policy Configuration ##########################

# Control what gets created during security policy orchestration
security_policy_config:
  create_network_classes: true     # Set false if network classes already exist
  create_cl_profiles: true         # Set false if CL profiles already exist
  create_out_of_state_profiles: true # Set false if OOS profiles already exist
  create_bdos_profiles: true       # Set false if BDoS profiles already exist
  create_dns_profiles: true        # Set false if DNS profiles already exist
  create_https_profiles: true      # Set false if HTTPS profiles already exist
  create_traffic_filter_profiles: true # Set false if Traffic Filter profiles already exist
  create_ssl_objects: true         # Set false if SSL objects already exist

  create_security_policies: true   # Set false to skip policy creation
  apply_policies_after_creation: true  # Set false to skip automatic policy updates

# Security policies with profile bindings
create_security_policies:
  - policy_name: "example_security_policy_1"
    state: "enable"                          # enable, disable
    action: "report_only"                    # block_and_report, report_only
    priority: "700"
    src_network: "any"                       # Network class (created above or existing)
    dst_network: "egor_test_net"             # Network class or "any" 
    direction: "oneway"                      # oneway, twoway 
    packet_reporting_status: "enable"       # enable, disable
    
    # Profile bindings (all optional - reference created or existing profiles)
    connection_limit_profile: "cl_prof_example"         # CL profile (created above or existing)
    bdos_profile: "BDOS_Profile_50"                      # BDOS profile (created above or existing)
    # syn_protection_profile: ""                         # SYN profile (if available) 
    dns_flood_profile: "dns_profile_10"                 # DNS profile (created above or existing)
    https_flood_profile: "https_profile_1"              # HTTPS profile (created above or existing)
    traffic_filters_profile: "TF_PROFILE_1"             # Traffic filter profile (created above or existing)
    signature_protection_profile: "All-DoS-Shield"      # AppSec profile (if available)
    # ert_attackers_feed_profile: ""                     # ERT profile (if available)
    # geo_feed_profile: ""                               # Geo feed profile (if available)
    # out_of_state_profile: ""                           # Out of state profile (if available)

  # Example of a second policy using different profiles
  # - policy_name: "example_security_policy_2"
  #   src_network: "any"
  #   dst_network: "web_servers"
  #   direction: "twoway"
  #   state: "enable"
  #   action: "block_and_report"
  #   priority: "200"
  #   connection_limit_profile: "cl_prof_existing_only"

# Parameter Descriptions:
# - policy_name: Unique name for the security policy
# - state: Whether policy is active (enable/disable)
# - action: What to do when policy triggers (block_and_report/report_only)
# - priority: Policy priority (1-1000, lower numbers = higher priority)
# - src_network/dst_network: Source and destination network classes or "any"
# - direction: Traffic direction to monitor (oneway/twoway/bidirectional)
# - packet_reporting_status: Enable detailed packet reporting
# - Profile bindings: Reference profiles created above or existing ones
#   * connection_limit_profile: Connection limit protection profile
#   * bdos_profile: Behavioral DoS flood protection profile  
#   * dns_flood_profile: DNS flood protection profile
#   * https_flood_profile: HTTPS flood protection profile
#   * traffic_filters_profile: Traffic filter protection profile
#   * signature_protection_profile: Application security signatures
#   * out_of_state_profile: Out-of-state connection handling
#   * Other profile types available as needed

# Usage Notes:
# 1. Orchestrator creates profiles first, then policies with bindings
# 2. Use security_policy_config to control which components are created
# 3. Reference profile names from sections above or use existing profiles
# 4. Empty profile fields ("") will not bind any profile of that type


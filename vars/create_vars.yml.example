---
# create_vars.yml.example - Template for creating network class variables
# Copy this file to create_vars.yml and customize with your environment details

# Target DefensePro devices - add or remove IP addresses as needed
dp_ip:
  - "10.105.192.32"
  # - "10.105.192.33"
  # - "10.105.192.34"

# Define network classes to create with their network groups
netclasses:
  # Example: Create a network class named "egor_test_net" with 4 network groups
  - name: "egor_test_net"
    groups:
      - { address: "10.10.10.0", mask: "255.255.255.0" }
      - { address: "10.10.11.0", mask: "255.255.255.0" }
      - { address: "10.10.12.0", mask: "255.255.255.0" }
      - { address: "10.10.13.0", mask: "255.255.255.0" }
  
  # Example: Create another network class  
  # - name: "web_servers"
  #   groups:
  #     - { address: "192.168.1.0", mask: "255.255.255.0" }
  #     - { address: "192.168.2.0", mask: "255.255.255.0" }
  
  # Example: Create with CIDR notation
  # - name: "database_servers"  
  #   groups:
  #     - { address: "10.20.1.0", mask: "24" }
  #     - { address: "10.20.2.0", mask: "24" }

# Notes:
# - name: Must be unique network class name
# - address: Network address for each group within the class
# - mask: Can be CIDR notation (e.g., "24") or dotted decimal (e.g., "255.255.255.0")  
# - Groups are automatically assigned indices starting from 0
# - The playbook will create all combinations of dp_ip × netclasses × groups


################################### Connection Limit Profiles ##############################
# Connection Limit Protection Subprofiles (OPTIONAL - only define if you want to create new protections)
# All parameters use user-friendly values that are automatically mapped to API values
# You can skip this entire section if you only want to create profiles using existing protections
cl_protections:
  - name: "cl_prot_tcp_example"
    protection_type: "concurrent_connections"  # Options: cps, concurrent_connections
    protocol: "tcp"             # Options: tcp, udp
    threshold: "100"            # Connection limit threshold (number)
    app_port_group: "https"     # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "src_ip"     # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "drop"              # Options: report_only, drop
    packet_report: "disable"    # Options: enable, disable
    index: 0                    # Optional: specific index to create at (defaults to 0 if not specified = will be allocated dynamically)
  - name: "cl_prot_udp_example"
    protection_type: "cps"      # Options: cps, concurrent_connections
    protocol: "udp"             # Options: tcp, udp
    threshold: "500"            # Connection limit threshold (number)
    app_port_group: ""          # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "dst_ip_and_port"  # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "report_only"       # Options: report_only, drop
    packet_report: "enable"     # Options: enable, disable
    # index: 450006             # Optional: if not specified, defaults to 0
  - name: "cl_prot_custom_index"
    protection_type: "cps"      # Options: cps, concurrent_connections
    protocol: "tcp"             # Options: tcp, udp
    threshold: "200"            # Connection limit threshold (number)
    app_port_group: "http"      # Optional: http, https, dns, ftp, or custom port (leave empty for all ports)
    tracking_type: "dst_ip"     # Options: src_ip, dst_ip, src_and_dest_ip, dst_ip_and_port
    action: "drop"              # Options: report_only, drop
    packet_report: "enable"     # Options: enable, disable
    index: 450007               # Optional: create at specific index 450007

# Parameter Descriptions:
# - protection_type: Type of detection (cps = Connections Per Second, concurrent_connections = Total active connections)
# - protocol: Network protocol to monitor
# - threshold: Number at which protection triggers
# - app_port_group: Application port group to monitor (http, https, dns, ftp, custom port, or empty for all ports)
# - tracking_type: What traffic to track (src_ip, dst_ip, both IPs, or dst_ip with port)
# - action: What to do when threshold exceeded (report_only = log only, drop = block traffic)
# - packet_report: Whether to enable detailed packet reporting
# - index: Optional specific index to create protection at (defaults to 0 if not specified)

# Connection Limit Profiles (OPTIONAL - only define if you want to create profiles)
# Can reference any protection names - existing or newly created above
# You can skip this entire section if you only want to create protections
cl_profiles:
  - name: "cl_prof_example"
    protections:
      - "cl_prot_tcp_example"   # Will be created above
      - "cl_prot_udp_example"   # Will be created above
  - name: "cl_prof_existing_only"
    protections:
      - "some_existing_protection"    # Reference existing protections without defining them

# Usage Scenarios:
# 1. Create protections only: Define cl_protections, skip cl_profiles
# 2. Create profiles only: Skip cl_protections, define cl_profiles with existing protection names
# 3. Create both: Define both cl_protections and cl_profiles


########################## BDoS Profiles ##########################
# Define BDOS profiles to create on each device
# All parameters use user-friendly values that are automatically mapped to API values
# You can skip this section if you only want to use existing BDoS profiles

bdos_profiles:
  - name: "BDOS_Profile_50"
    params:
      action: "report_only"                   # Options: report_only, block_and_report
      syn_flood: "enable"                     # Options: enable, disable
      udp_flood: "enable"                     # Options: enable, disable
      igmp_flood: "enable"                    # Options: enable, disable
      icmp_flood: "enable"                    # Options: enable, disable
      tcp_ack_fin_flood: "enable"             # Options: enable, disable
      tcp_rst_flood: "enable"                 # Options: enable, disable
      tcp_syn_ack_flood: "enable"             # Options: enable, disable
      tcp_frag_flood: "enable"                # Options: enable, disable
      udp_frag_flood: "enable"                # Options: enable, disable
      inbound_traffic: 1000000                # 1 to 1342177280 (kbps)
      outbound_traffic: 500000                # 1 to 1342177280 (kbps)
      tcp_in_quota: 80                         # 0-100 (%)
      udp_in_quota: 50                         # 0-100 (%)
      icmp_in_quota: 10                        # 0-100 (%)
      igmp_in_quota: 50                        # 0-100 (%)
      tcp_out_quota: 80                        # 0-100 (%)
      udp_out_quota: 50                        # 0-100 (%)
      icmp_out_quota: 10                        # 0-100 (%)
      igmp_out_quota: 50                        # 0-100 (%)
      transparent_optimization: "enable"       # Options: enable, disable
      packet_report: "enable"                  # Options: enable, disable
      burst_attack: "enable"                   # Options: enable, disable
      maximum_interval_between_bursts: 32      # Minutes (1-336)
      learning_suppression_threshold: 10       # 0-50
      footprint_strictness: "medium"           # Options: low, medium, high
      udp_packet_rate_detection_sensitivity: "low"  # Options: Ignore_or_Disable, low, medium, high
      bdos_rate_limit: "user_defined"          # Options: disable, normal_edge, suspect_edge, user_defined
      user_defined_rate_limit: 500             # 0-4000 (rate value)
      user_defined_rate_limit_unit: "mbps"     # Options: kbps, mbps, gbps
      adv_udp_detection: "enable"              # Options: enable, disable

# Parameter Descriptions:
# - action: What to do when a flood is detected
# - *_flood: Enable/disable detection of specific attack type
# - inbound_traffic / outbound_traffic: Max traffic allowed (bps)
# - *_in_quota / *_out_quota: Traffic quota per protocol (%)
# - transparent_optimization: Optimize traffic without blocking
# - packet_report: Enable detailed packet reporting
# - burst_attack: Detect burst attacks
# - maximum_interval_between_bursts: Interval in minutes to define burst
# - learning_suppression_threshold: Suppress alerts during learning (0-50)
# - footprint_strictness: Sensitivity of footprint analysis
# - udp_packet_rate_detection_sensitivity: Sensitivity of UDP flood detection
# - bdos_rate_limit: Rate limit mode
# - user_defined_rate_limit / unit: Custom rate limit
# - adv_udp_detection: Advanced UDP detection toggle

# Usage Scenarios:
# 1. Create new BDoS profiles: Define bdos_profiles
# 2. Use existing BDoS profiles only: Skip this section and reference them elsewhere

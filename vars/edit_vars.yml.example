---
# edit_vars.yml.example - Template for editing network class variables
# Copy this file to edit_vars.yml and customize with your environment details

# Target DefensePro devices - add or remove IP addresses as needed
dp_ip:
  - "10.105.192.32"
  # - "10.105.192.33"
  # - "10.105.192.34"

# Define the network class groups to edit
# Each entry specifies which class_name, index, and new values to apply
# To get the current network class structure and indices, use the get_network_class module first
edit_networks:
  # Example: Edit index 2 of "egor_test_net" to have address 100.1.117.0/27
  - {class_name: "egor_test_net", index: 2, address: "100.1.117.0", mask: "27"}
  
  # Example: Edit index 1 of "egor_test_net" to have address 100.16.10.0/24  
  - {class_name: "egor_test_net", index: 1, address: "100.16.10.0", mask: "24"}
  
  # Example: Edit index 0 with subnet mask in dotted decimal notation
  # - {class_name: "egor_test_net", index: 0, address: "192.168.100.0", mask: "255.255.255.0"}
  
  # Example: Edit different network class
  # - {class_name: "another_net_class", index: 0, address: "10.0.0.0", mask: "255.255.255.0"}
  
  # Add more entries as needed - the playbook will process all combinations of dp_ip × edit_networks

##################### Edit BDoS Profile ######################################
# edit_vars.yml.example - Template for editing BDOS profiles
# Copy this file to edit_vars.yml and customize with your environment details

# Target DefensePro devices - add or remove IP addresses as needed
dp_ip:
  - "10.105.192.32"
  # - "10.105.192.33"
  # - "10.105.192.34"

# Define the BDOS profiles to edit
# Each entry specifies the profile name and the parameters to update
# Use the API or existing profiles to determine valid parameter values
edit_bdos_profiles:
  # BDOS profiles to update on each device
bdos_profiles:
  - name: "BDOS_Profile_4"
    params:
      action: "report_only"                  # report_only/block_and_report
      syn_flood: "enable"                    # enable/disable
      udp_flood: "enable"                    # enable/disable
      igmp_flood: "disable"                 # enable/disable
      icmp_flood: "enable"                   # enable/disable
      tcp_ack_fin_flood: "disable"          # enable/disable
      tcp_rst_flood: "disable"              # enable/disable
      tcp_syn_ack_flood: "disable"          # enable/disable
      tcp_frag_flood: "disable"             # enable/disable
      udp_frag_flood: "disable"             # enable/disable
      inbound_traffic: 500000               # 1 to 1342177280
      outbound_traffic: 500000               # 1 to 1342177280
      tcp_in_quota: 50                        # 0-100
      udp_in_quota: 50
      icmp_in_quota: 50
      igmp_in_quota: 50
      tcp_out_quota: 50
      udp_out_quota: 50
      icmp_out_quota: 50
      igmp_out_quota: 50
      transparent_optimization: "enable"     # enable/disable
      packet_report: "enable"                # enable/disable
      burst_attack: "disable"                # enable/disable
      maximum_interval_between_bursts: 60    # seconds
      learning_suppression_threshold: 10     # 0-50
      footprint_strictness: "medium"         # low/medium/high
      bdos_rate_limit: "user_defined"        # disable/normal_edge/suspect_edge/user_defined
      user_defined_rate_limit: 500           # 0-4000
      user_defined_rate_limit_unit: "mbps"   # kbps/mbps/gbps
      adv_udp_detection: "enable"            # enable/disable

  # Add more BDOS profiles as needed
  # The playbook will process all combinations of dp_ip × edit_bdos_profiles



# Notes:
# - class_name: Must be an existing network class name
# - index: The sub-index of the network group within the class (starting from 0)
# - address: The new network address to assign
# - mask: Can be CIDR notation (e.g., "24") or dotted decimal (e.g., "255.255.255.0")
# - Use get_network_class module to discover existing classes and their current indices
